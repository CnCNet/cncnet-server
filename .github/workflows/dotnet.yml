name: Publish
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  calculate-version:
    name: Calculate Version
    runs-on: windows-latest
    outputs:
      AssemblySemVer: ${{ steps.gitversion.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ steps.gitversion.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}
      SemVer: ${{ steps.gitversion.outputs.SemVer }}
      PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}
      Sha: ${{ steps.gitversion.outputs.Sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@main
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@main
  publish:
    runs-on: windows-latest
    needs: calculate-version
    env:
      AssemblySemVer: ${{ needs.calculate-version.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ needs.calculate-version.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ needs.calculate-version.outputs.InformationalVersion }}
      SemVer: ${{ needs.calculate-version.outputs.SemVer }}
      Sha: ${{ needs.calculate-version.outputs.Sha }}
    strategy:
      matrix:
        os: [win10, linux, osx.13, ubuntu.22.04, fedora.38]
        platform: [x64, arm64]
        framework: [net8.0, net7.0]
        release: [Release, V2AndV3Release]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ env.Sha }}
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: '8.x.x'
          dotnet-quality: 'preview'
      - name: Publish
        run: dotnet publish -c ${{ matrix.release }} -f ${{ matrix.framework }} -r ${{ matrix.os }}-${{ matrix.platform }} --no-self-contained -p:PublishSingleFile=true -p:DebugType=embedded -p:AssemblyVersion=$env:GitVersion_AssemblySemVer -p:FileVersion=$env:GitVersion_AssemblySemFileVer -p:InformationalVersion=$env:GitVersion_InformationalVersion
      - name: Zip
        run: 7z a -r cncnet-server-v${{ env.SemVer }}-${{ matrix.framework }}-${{ matrix.release == 'V2AndV3Release' && 'V2+V3' || 'V3' }}-${{ matrix.os }}-${{ matrix.platform }}.zip ./bin/${{ matrix.release }}/${{ matrix.framework }}/${{ matrix.os }}-${{ matrix.platform }}/publish/*
      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.framework }}-${{ matrix.release == 'V2AndV3Release' && 'V2+V3' || 'V3' }}-${{ matrix.os }}-${{ matrix.platform }}
          path: cncnet-server-v${{ env.SemVer }}-${{ matrix.framework }}-${{ matrix.release == 'V2AndV3Release' && 'V2+V3' || 'V3' }}-${{ matrix.os }}-${{ matrix.platform }}.zip
          if-no-files-found: error
  release:
    needs: [calculate-version, publish]
    env:
      PreReleaseTag: ${{ needs.calculate-version.outputs.PreReleaseTag }}
      SemVer: ${{ needs.calculate-version.outputs.SemVer }}
      Sha: ${{ needs.calculate-version.outputs.Sha }}
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ env.Sha }}
      - name: Download Artifacts
        uses: actions/download-artifact@main
        with:
          path: ./artifacts
      - name: Release
        run: gh release create v${{ env.SemVer }} (get-item ./artifacts/*/*.zip) --generate-notes --target ${{ github.sha }} ${{ env.PreReleaseTag != '' && '--prerelease' || '' }}
        env:
          GH_TOKEN: ${{ github.token }}